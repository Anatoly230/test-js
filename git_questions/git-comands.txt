полезные ссылка

как работает git - взгляд изнутри
https://smartiqa.ru/courses/git/lesson-2

команды
https://github.com/ivan1kazantsev/dev-helper/tree/master/cmdline/git




git status
/*были ли изменения*/

git diff
/*какие произошли непроиндексированные изменения (тоесть те, которые НЕПРОШЛИ комманду  git add .  или git add file_name) diff - different*/

git diff --staged
/*какие произошли уже проиндексированные изменения (тоесть те, которые прошли комманду  git add .  или git add file_name)*/

git log
/*вывести подробный список произведенных commit - выводит результат в 5 строк*/

git log -1
/*показывает 1 последний  commit (-2, показывает 2 последних, -3, показывает 3 последних и т.д.)*/

git log --oneline
/*вывести список произведенных commit, где каждый commit описан в одну строку - one line а не в 5 строк как при стандартной комманде  git log (показывает не все комиты, если был откат, то эта комманда выдает список commit только до откатанного  commit)*/

git log --oneline --all
/*вывести весь список произведенных commit, произведенных с самого первого коммита*/

git log --oneline --all --graph
/*выводит все commit в виде 2D дерева*/

git cat-file -p 316894b5cdfbdb9e631077de6a7cf05c28f40b4f /*параметр -p  выводит данные в человеко-читаемом виде (в данном примере 316894b5cdfbdb9e631077de6a7cf05c28f40b4f - это хэш-метка указанного  commit)*/

git show 316894b5cdfbdb9e631077de6a7cf05c28f40b4f 		/*показать все изменения в конкретном commit на который указывает хэш-метка, в этом примере - 316894b5cdfbdb9e631077de6a7cf05c28f40b4f */

git checkout file_name
/*откат произошедших  изменений в конкретном файле*/

cat file_name
/*эта комманда выводит на экран содержимое файла*/

git checkout branch_name
/* переход на ветку с имеющимся названием ветки */

git checkout d3bdd91
/*откат изменений на  commit c хэш-меткой взятой из результата после комманды git log (в данном примере это d3bdd91)*/

git checkout -b newBranch d3bdd91
/*откат изменений на  commit c хэш-меткой + назанчение ей индивидульного имени  (в данном примере tagName) и превращение ее в ветку (в данном примере это - newBranch). После такого переименования, на нее можно будет ссылаться таким образом (эта комманда указана в рамках данного примера) - git checkout tagName*/

git add --all
/*проиндексировать ВСЕ произошедшие изменения (можно также использовать конструкцию git add .   "." точка означает "все" )*/

git add file_name
/*проиндексировать произошедшие в выбранном файле или в файлах(в случае с двумя и более файлами, они записываются через пробел)*/

git reset HEAD file_name
/*отмена индексации изменений у конкретного файла(в этом примере file_name). Это делается для того, чтобы делать commit без изменений в конкретном файле, чтобы при откате назад, откат имел логику */

git reset HEAD .
/*отмена индексации всех изменений (точка "." означает "все"). для чего это делается пока не понятно, но комманда достпна, мало ли, может пригодится*/

git commit -m "Описание вненесенных изменений"
/*произвести  commit локально, тоесть на своём компьютере (после установки git дистрибьютива, компьютер становится локальным репозиторий/виртуальным сервером, куда записывается вся история изменений, а после комманды git push вся история изменений уходит на удалённый репозиторий) -m  означает сообщение - message*/

git commit --amend -m "Правильное сообщение commit"
/*Изменение сообщения  у последнего  commit, в случае если там какая либо грамматическая ошибка или вовсе неверное сообщение, не относящееся к данному  commit*/

git rm file_name
/*Удаление из  commit конкретного файла, в данном примере file_name (rm - remove) - ВАЖНОЕ ЗАМЕЧАНИЕ - файл удалется как из коммита, так и из папки*/

git commit --amend --no-edit
/*Флаг --no-edit позволяет внести изменения в коммит без изменения комментария к нему. Итоговый коммит заменит неполный коммит. При этом все будет выглядеть так, словно изменения в файлах hello.py и main.py были сделаны за один коммит.*/

git rm --cached file_name
/*Удаление из  commit конкретного файла но не удаляя файл из папки, файл удаляется только из commit, после этой комманды также необходимо запустить команду git commit --amend --no-edit*/

неболшая справка по origin/master
origin - это удалённый репозиторий (имя удалённого репозитория)
master -  ветка удалённого репозитория на которую отправляются изменения

git push
git push origin master 
/*оптправить изменения (произведённые commit с компьютера на удалённый репозиторий) */

git pull origin branch_name 
/*поттянуть изменения с ветки branch_name удалённого репозитория*/

git fetch origin
/* fetch с англ. - извлечь
Комменда необходима, если на удалённом репозитории есть новая ветка и коммиты в них, 
а на локальном она еще не создана и соотвественно нет тех изменения которые находятся на удалённом репозитории.
Все изменения подтягиваются на локальный репозиторий, но их необходимо слить с локальным репозиторием.
 */

  git merge origin
/* после команды  git fetch  следует использовать команду  git merge origin 
Этой коммандой поддтягиваются новые, и сливаются старые файлы, еслиВ них были произведены какие-то изменения
по сути, git pull origin содержит в себе две команды:
         git fetch origin - подтягвает струткурные изменения (ветки которых не было в локальном репозитории)
        git merge origin - сливает изменения в файлах
*/

git branch --set-upstream-to=origin/branch_name
/*позволяет связать ветку на локальном репозитории с веткой на удаленном репозитории, чтобы не прописывать полный путь, напр.:
    git push origin/branch_name  - отправлять изменения
    git pull origin/branch_name - подтягивать изменения 
а просто писать :
    git pull  - отправлять изменения
    git push - подтягивать изменения
*/

git branch -v
git branch -vv
/* показать какие локальные ветки связаны с ветками на удалённом репозитории
-v      подробное описание
-vv     очень подробно описание
*/


